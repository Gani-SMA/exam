import { body, param, query, ValidationChain } from 'express-validator';\nimport mongoose from 'mongoose';\nimport { User } from '../models/User';\nimport { Exam } from '../models/Exam';\n\n// Custom validators\nconst isValidObjectId = (value: string): boolean => {\n  return mongoose.Types.ObjectId.isValid(value);\n};\n\nconst isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nconst isStrongPassword = (password: string): boolean => {\n  // At least 8 characters, 1 uppercase, 1 lowercase, 1 number, 1 special character\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  return passwordRegex.test(password);\n};\n\n// Authentication validations\nexport const validateRegister: ValidationChain[] = [\n  body('firstName')\n    .trim()\n    .notEmpty()\n    .withMessage('First name is required')\n    .isLength({ min: 2, max: 50 })\n    .withMessage('First name must be between 2 and 50 characters')\n    .matches(/^[a-zA-Z\\s]+$/)\n    .withMessage('First name can only contain letters and spaces'),\n    \n  body('lastName')\n    .trim()\n    .notEmpty()\n    .withMessage('Last name is required')\n    .isLength({ min: 2, max: 50 })\n    .withMessage('Last name must be between 2 and 50 characters')\n    .matches(/^[a-zA-Z\\s]+$/)\n    .withMessage('Last name can only contain letters and spaces'),\n    \n  body('email')\n    .trim()\n    .notEmpty()\n    .withMessage('Email is required')\n    .isEmail()\n    .withMessage('Please provide a valid email')\n    .normalizeEmail()\n    .custom(async (email) => {\n      const existingUser = await User.findOne({ email });\n      if (existingUser) {\n        throw new Error('Email already registered');\n      }\n      return true;\n    }),\n    \n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters long')\n    .custom((password) => {\n      if (!isStrongPassword(password)) {\n        throw new Error('Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character');\n      }\n      return true;\n    }),\n    \n  body('confirmPassword')\n    .notEmpty()\n    .withMessage('Password confirmation is required')\n    .custom((confirmPassword, { req }) => {\n      if (confirmPassword !== req.body.password) {\n        throw new Error('Passwords do not match');\n      }\n      return true;\n    }),\n    \n  body('role')\n    .optional()\n    .isIn(['student', 'instructor'])\n    .withMessage('Role must be either student or instructor')\n];\n\nexport const validateLogin: ValidationChain[] = [\n  body('email')\n    .trim()\n    .notEmpty()\n    .withMessage('Email is required')\n    .isEmail()\n    .withMessage('Please provide a valid email')\n    .normalizeEmail(),\n    \n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\nexport const validateForgotPassword: ValidationChain[] = [\n  body('email')\n    .trim()\n    .notEmpty()\n    .withMessage('Email is required')\n    .isEmail()\n    .withMessage('Please provide a valid email')\n    .normalizeEmail()\n];\n\nexport const validateResetPassword: ValidationChain[] = [\n  body('token')\n    .notEmpty()\n    .withMessage('Reset token is required'),\n    \n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters long')\n    .custom((password) => {\n      if (!isStrongPassword(password)) {\n        throw new Error('Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character');\n      }\n      return true;\n    }),\n    \n  body('confirmPassword')\n    .notEmpty()\n    .withMessage('Password confirmation is required')\n    .custom((confirmPassword, { req }) => {\n      if (confirmPassword !== req.body.password) {\n        throw new Error('Passwords do not match');\n      }\n      return true;\n    })\n];\n\nexport const validateChangePassword: ValidationChain[] = [\n  body('currentPassword')\n    .notEmpty()\n    .withMessage('Current password is required'),\n    \n  body('newPassword')\n    .notEmpty()\n    .withMessage('New password is required')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters long')\n    .custom((password) => {\n      if (!isStrongPassword(password)) {\n        throw new Error('Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character');\n      }\n      return true;\n    })\n    .custom((newPassword, { req }) => {\n      if (newPassword === req.body.currentPassword) {\n        throw new Error('New password must be different from current password');\n      }\n      return true;\n    }),\n    \n  body('confirmPassword')\n    .notEmpty()\n    .withMessage('Password confirmation is required')\n    .custom((confirmPassword, { req }) => {\n      if (confirmPassword !== req.body.newPassword) {\n        throw new Error('Passwords do not match');\n      }\n      return true;\n    })\n];\n\n// User profile validations\nexport const validateUpdateProfile: ValidationChain[] = [\n  body('firstName')\n    .optional()\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('First name must be between 2 and 50 characters')\n    .matches(/^[a-zA-Z\\s]+$/)\n    .withMessage('First name can only contain letters and spaces'),\n    \n  body('lastName')\n    .optional()\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('Last name must be between 2 and 50 characters')\n    .matches(/^[a-zA-Z\\s]+$/)\n    .withMessage('Last name can only contain letters and spaces'),\n    \n  body('phone')\n    .optional()\n    .matches(/^[+]?[1-9]?[0-9]{7,15}$/)\n    .withMessage('Please provide a valid phone number'),\n    \n  body('dateOfBirth')\n    .optional()\n    .isISO8601()\n    .withMessage('Please provide a valid date')\n    .custom((date) => {\n      const birthDate = new Date(date);\n      const today = new Date();\n      const age = today.getFullYear() - birthDate.getFullYear();\n      if (age < 13 || age > 120) {\n        throw new Error('Age must be between 13 and 120 years');\n      }\n      return true;\n    })\n];\n\n// Exam validations\nexport const validateCreateExam: ValidationChain[] = [\n  body('title')\n    .trim()\n    .notEmpty()\n    .withMessage('Exam title is required')\n    .isLength({ min: 3, max: 200 })\n    .withMessage('Title must be between 3 and 200 characters'),\n    \n  body('description')\n    .trim()\n    .notEmpty()\n    .withMessage('Exam description is required')\n    .isLength({ min: 10, max: 1000 })\n    .withMessage('Description must be between 10 and 1000 characters'),\n    \n  body('type')\n    .notEmpty()\n    .withMessage('Exam type is required')\n    .isIn(['GATE', 'GRE', 'TOEFL', 'CUSTOM'])\n    .withMessage('Invalid exam type'),\n    \n  body('category')\n    .trim()\n    .notEmpty()\n    .withMessage('Category is required'),\n    \n  body('duration')\n    .isInt({ min: 1, max: 600 })\n    .withMessage('Duration must be between 1 and 600 minutes'),\n    \n  body('totalQuestions')\n    .isInt({ min: 1, max: 500 })\n    .withMessage('Total questions must be between 1 and 500'),\n    \n  body('passingScore')\n    .isFloat({ min: 0, max: 100 })\n    .withMessage('Passing score must be between 0 and 100'),\n    \n  body('maxAttempts')\n    .isInt({ min: 1, max: 10 })\n    .withMessage('Max attempts must be between 1 and 10'),\n    \n  body('difficultyDistribution.easy')\n    .isFloat({ min: 0, max: 100 })\n    .withMessage('Easy difficulty percentage must be between 0 and 100'),\n    \n  body('difficultyDistribution.medium')\n    .isFloat({ min: 0, max: 100 })\n    .withMessage('Medium difficulty percentage must be between 0 and 100'),\n    \n  body('difficultyDistribution.hard')\n    .isFloat({ min: 0, max: 100 })\n    .withMessage('Hard difficulty percentage must be between 0 and 100')\n    .custom((hard, { req }) => {\n      const { easy, medium } = req.body.difficultyDistribution;\n      const total = parseFloat(easy) + parseFloat(medium) + parseFloat(hard);\n      if (Math.abs(total - 100) > 0.01) {\n        throw new Error('Difficulty distribution must total 100%');\n      }\n      return true;\n    })\n];\n\nexport const validateUpdateExam: ValidationChain[] = [\n  param('id')\n    .custom((id) => {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid exam ID');\n      }\n      return true;\n    }),\n    \n  body('title')\n    .optional()\n    .trim()\n    .isLength({ min: 3, max: 200 })\n    .withMessage('Title must be between 3 and 200 characters'),\n    \n  body('description')\n    .optional()\n    .trim()\n    .isLength({ min: 10, max: 1000 })\n    .withMessage('Description must be between 10 and 1000 characters'),\n    \n  body('duration')\n    .optional()\n    .isInt({ min: 1, max: 600 })\n    .withMessage('Duration must be between 1 and 600 minutes'),\n    \n  body('totalQuestions')\n    .optional()\n    .isInt({ min: 1, max: 500 })\n    .withMessage('Total questions must be between 1 and 500'),\n    \n  body('passingScore')\n    .optional()\n    .isFloat({ min: 0, max: 100 })\n    .withMessage('Passing score must be between 0 and 100')\n];\n\n// Question validations\nexport const validateCreateQuestion: ValidationChain[] = [\n  body('type')\n    .notEmpty()\n    .withMessage('Question type is required')\n    .isIn(['mcq', 'numerical', 'essay', 'listening', 'speaking', 'reading'])\n    .withMessage('Invalid question type'),\n    \n  body('subject')\n    .trim()\n    .notEmpty()\n    .withMessage('Subject is required')\n    .isLength({ max: 100 })\n    .withMessage('Subject cannot exceed 100 characters'),\n    \n  body('topic')\n    .trim()\n    .notEmpty()\n    .withMessage('Topic is required')\n    .isLength({ max: 200 })\n    .withMessage('Topic cannot exceed 200 characters'),\n    \n  body('difficulty')\n    .notEmpty()\n    .withMessage('Difficulty is required')\n    .isIn(['easy', 'medium', 'hard'])\n    .withMessage('Invalid difficulty level'),\n    \n  body('question')\n    .trim()\n    .notEmpty()\n    .withMessage('Question text is required')\n    .isLength({ min: 10, max: 5000 })\n    .withMessage('Question must be between 10 and 5000 characters'),\n    \n  body('correctAnswer')\n    .notEmpty()\n    .withMessage('Correct answer is required'),\n    \n  body('estimatedTime')\n    .isInt({ min: 10, max: 3600 })\n    .withMessage('Estimated time must be between 10 and 3600 seconds'),\n    \n  body('points')\n    .isInt({ min: 1, max: 100 })\n    .withMessage('Points must be between 1 and 100'),\n    \n  // MCQ specific validation\n  body('options')\n    .if(body('type').equals('mcq'))\n    .isArray({ min: 2, max: 6 })\n    .withMessage('MCQ questions must have 2-6 options')\n    .custom((options) => {\n      if (options.some((option: string) => !option || option.trim().length === 0)) {\n        throw new Error('All options must be non-empty');\n      }\n      return true;\n    })\n];\n\n// Exam session validations\nexport const validateStartExam: ValidationChain[] = [\n  param('examId')\n    .custom((id) => {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid exam ID');\n      }\n      return true;\n    })\n    .custom(async (examId) => {\n      const exam = await Exam.findById(examId);\n      if (!exam) {\n        throw new Error('Exam not found');\n      }\n      if (!exam.isActive) {\n        throw new Error('Exam is not active');\n      }\n      return true;\n    })\n];\n\nexport const validateSubmitAnswer: ValidationChain[] = [\n  param('sessionId')\n    .custom((id) => {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid session ID');\n      }\n      return true;\n    }),\n    \n  body('questionId')\n    .custom((id) => {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid question ID');\n      }\n      return true;\n    }),\n    \n  body('answer')\n    .notEmpty()\n    .withMessage('Answer is required'),\n    \n  body('timeSpent')\n    .isInt({ min: 0 })\n    .withMessage('Time spent must be a non-negative integer')\n];\n\n// Battle validations\nexport const validateCreateBattle: ValidationChain[] = [\n  body('title')\n    .trim()\n    .notEmpty()\n    .withMessage('Battle title is required')\n    .isLength({ min: 3, max: 100 })\n    .withMessage('Title must be between 3 and 100 characters'),\n    \n  body('type')\n    .notEmpty()\n    .withMessage('Battle type is required')\n    .isIn(['1v1', 'team', 'tournament', 'practice'])\n    .withMessage('Invalid battle type'),\n    \n  body('mode')\n    .notEmpty()\n    .withMessage('Battle mode is required')\n    .isIn(['speed', 'accuracy', 'mixed', 'survival'])\n    .withMessage('Invalid battle mode'),\n    \n  body('questionCount')\n    .isInt({ min: 1, max: 100 })\n    .withMessage('Question count must be between 1 and 100'),\n    \n  body('timeLimit')\n    .isInt({ min: 1, max: 180 })\n    .withMessage('Time limit must be between 1 and 180 minutes'),\n    \n  body('subject')\n    .trim()\n    .notEmpty()\n    .withMessage('Subject is required'),\n    \n  body('difficulty')\n    .notEmpty()\n    .withMessage('Difficulty is required')\n    .isIn(['easy', 'medium', 'hard', 'mixed'])\n    .withMessage('Invalid difficulty level'),\n    \n  body('maxParticipants')\n    .isInt({ min: 2, max: 100 })\n    .withMessage('Max participants must be between 2 and 100')\n];\n\n// Query parameter validations\nexport const validatePagination: ValidationChain[] = [\n  query('page')\n    .optional()\n    .isInt({ min: 1 })\n    .withMessage('Page must be a positive integer'),\n    \n  query('limit')\n    .optional()\n    .isInt({ min: 1, max: 100 })\n    .withMessage('Limit must be between 1 and 100'),\n    \n  query('sort')\n    .optional()\n    .isIn(['createdAt', '-createdAt', 'title', '-title', 'score', '-score'])\n    .withMessage('Invalid sort parameter')\n];\n\nexport const validateObjectId = (paramName: string): ValidationChain => {\n  return param(paramName)\n    .custom((id) => {\n      if (!isValidObjectId(id)) {\n        throw new Error(`Invalid ${paramName}`);\n      }\n      return true;\n    });\n};\n\n// File upload validations\nexport const validateFileUpload = [\n  body('fileType')\n    .optional()\n    .isIn(['image', 'audio', 'video', 'document'])\n    .withMessage('Invalid file type'),\n    \n  body('maxSize')\n    .optional()\n    .isInt({ min: 1 })\n    .withMessage('Max size must be a positive integer')\n];\n\n// Search validations\nexport const validateSearch: ValidationChain[] = [\n  query('q')\n    .optional()\n    .trim()\n    .isLength({ min: 1, max: 100 })\n    .withMessage('Search query must be between 1 and 100 characters'),\n    \n  query('subject')\n    .optional()\n    .trim()\n    .isLength({ max: 100 })\n    .withMessage('Subject filter cannot exceed 100 characters'),\n    \n  query('difficulty')\n    .optional()\n    .isIn(['easy', 'medium', 'hard'])\n    .withMessage('Invalid difficulty filter'),\n    \n  query('type')\n    .optional()\n    .isIn(['mcq', 'numerical', 'essay', 'listening', 'speaking', 'reading'])\n    .withMessage('Invalid type filter')\n];"