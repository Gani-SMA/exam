import express from 'express';\nimport {\n  register,\n  login,\n  logout,\n  refreshToken,\n  verifyEmail,\n  forgotPassword,\n  resetPassword,\n  changePassword,\n  getMe,\n  updateProfile,\n  deleteAccount\n} from '../controllers/auth';\nimport {\n  validateRegister,\n  validateLogin,\n  validateForgotPassword,\n  validateResetPassword,\n  validateChangePassword,\n  validateUpdateProfile\n} from '../middleware/validation';\nimport { authenticate, userRateLimit } from '../middleware/auth';\nimport { validateRequest } from '../middleware/errorHandler';\n\nconst router = express.Router();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     User:\n *       type: object\n *       required:\n *         - firstName\n *         - lastName\n *         - email\n *         - password\n *       properties:\n *         _id:\n *           type: string\n *           description: The auto-generated id of the user\n *         firstName:\n *           type: string\n *           description: User's first name\n *         lastName:\n *           type: string\n *           description: User's last name\n *         email:\n *           type: string\n *           description: User's email address\n *         role:\n *           type: string\n *           enum: [student, instructor, admin]\n *           description: User's role in the system\n *         avatar:\n *           type: string\n *           description: URL to user's avatar image\n *         isEmailVerified:\n *           type: boolean\n *           description: Whether user's email is verified\n *         gamification:\n *           type: object\n *           properties:\n *             level:\n *               type: number\n *             xp:\n *               type: number\n *             totalXP:\n *               type: number\n *             streak:\n *               type: object\n *               properties:\n *                 current:\n *                   type: number\n *                 longest:\n *                   type: number\n *                 lastActivity:\n *                   type: string\n *                   format: date-time\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: When the user was created\n *     \n *     AuthResponse:\n *       type: object\n *       properties:\n *         success:\n *           type: boolean\n *         message:\n *           type: string\n *         data:\n *           type: object\n *           properties:\n *             user:\n *               $ref: '#/components/schemas/User'\n *             token:\n *               type: string\n *               description: JWT access token\n *             refreshToken:\n *               type: string\n *               description: JWT refresh token\n *             expiresIn:\n *               type: string\n *               description: Token expiration time\n *     \n *     Error:\n *       type: object\n *       properties:\n *         success:\n *           type: boolean\n *           example: false\n *         error:\n *           type: object\n *           properties:\n *             code:\n *               type: string\n *             message:\n *               type: string\n *             details:\n *               type: object\n *             timestamp:\n *               type: string\n *               format: date-time\n *             requestId:\n *               type: string\n */\n\n/**\n * @swagger\n * /api/auth/register:\n *   post:\n *     summary: Register a new user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - firstName\n *               - lastName\n *               - email\n *               - password\n *               - confirmPassword\n *             properties:\n *               firstName:\n *                 type: string\n *                 minLength: 2\n *                 maxLength: 50\n *                 example: John\n *               lastName:\n *                 type: string\n *                 minLength: 2\n *                 maxLength: 50\n *                 example: Doe\n *               email:\n *                 type: string\n *                 format: email\n *                 example: john.doe@example.com\n *               password:\n *                 type: string\n *                 minLength: 8\n *                 example: SecurePass123!\n *               confirmPassword:\n *                 type: string\n *                 example: SecurePass123!\n *               role:\n *                 type: string\n *                 enum: [student, instructor]\n *                 default: student\n *     responses:\n *       201:\n *         description: User registered successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: Registration successful. Please check your email to verify your account.\n *                 data:\n *                   type: object\n *                   properties:\n *                     userId:\n *                       type: string\n *                     email:\n *                       type: string\n *                     emailSent:\n *                       type: boolean\n *       400:\n *         description: Validation error or email already exists\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.post('/register', validateRegister, validateRequest, register);\n\n/**\n * @swagger\n * /api/auth/login:\n *   post:\n *     summary: Login user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - email\n *               - password\n *             properties:\n *               email:\n *                 type: string\n *                 format: email\n *                 example: john.doe@example.com\n *               password:\n *                 type: string\n *                 example: SecurePass123!\n *     responses:\n *       200:\n *         description: Login successful\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/AuthResponse'\n *       401:\n *         description: Invalid credentials or email not verified\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.post('/login', validateLogin, validateRequest, userRateLimit(5, 15 * 60 * 1000), login);\n\n/**\n * @swagger\n * /api/auth/logout:\n *   post:\n *     summary: Logout user\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Logout successful\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: Logged out successfully\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.post('/logout', authenticate, logout);\n\n/**\n * @swagger\n * /api/auth/refresh:\n *   post:\n *     summary: Refresh access token\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - refreshToken\n *             properties:\n *               refreshToken:\n *                 type: string\n *                 description: Valid refresh token\n *     responses:\n *       200:\n *         description: Token refreshed successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: Token refreshed successfully\n *                 data:\n *                   type: object\n *                   properties:\n *                     token:\n *                       type: string\n *                     refreshToken:\n *                       type: string\n *                     expiresIn:\n *                       type: string\n *       401:\n *         description: Invalid refresh token\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.post('/refresh', userRateLimit(10, 15 * 60 * 1000), refreshToken);\n\n/**\n * @swagger\n * /api/auth/verify-email:\n *   post:\n *     summary: Verify email address\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - token\n *             properties:\n *               token:\n *                 type: string\n *                 description: Email verification token\n *     responses:\n *       200:\n *         description: Email verified successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: Email verified successfully. You can now log in.\n *       400:\n *         description: Invalid or expired token\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.post('/verify-email', verifyEmail);\n\n/**\n * @swagger\n * /api/auth/forgot-password:\n *   post:\n *     summary: Request password reset\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - email\n *             properties:\n *               email:\n *                 type: string\n *                 format: email\n *                 example: john.doe@example.com\n *     responses:\n *       200:\n *         description: Password reset email sent (if account exists)\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: If an account with that email exists, a password reset link has been sent.\n *       400:\n *         description: Validation error\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.post('/forgot-password', validateForgotPassword, validateRequest, userRateLimit(3, 15 * 60 * 1000), forgotPassword);\n\n/**\n * @swagger\n * /api/auth/reset-password:\n *   post:\n *     summary: Reset password with token\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - token\n *               - password\n *               - confirmPassword\n *             properties:\n *               token:\n *                 type: string\n *                 description: Password reset token\n *               password:\n *                 type: string\n *                 minLength: 8\n *                 example: NewSecurePass123!\n *               confirmPassword:\n *                 type: string\n *                 example: NewSecurePass123!\n *     responses:\n *       200:\n *         description: Password reset successful\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/AuthResponse'\n *       400:\n *         description: Invalid token or validation error\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.post('/reset-password', validateResetPassword, validateRequest, resetPassword);\n\n/**\n * @swagger\n * /api/auth/change-password:\n *   put:\n *     summary: Change password (authenticated)\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - currentPassword\n *               - newPassword\n *               - confirmPassword\n *             properties:\n *               currentPassword:\n *                 type: string\n *                 example: CurrentPass123!\n *               newPassword:\n *                 type: string\n *                 minLength: 8\n *                 example: NewSecurePass123!\n *               confirmPassword:\n *                 type: string\n *                 example: NewSecurePass123!\n *     responses:\n *       200:\n *         description: Password changed successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: Password changed successfully\n *       400:\n *         description: Validation error or incorrect current password\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.put('/change-password', authenticate, validateChangePassword, validateRequest, changePassword);\n\n/**\n * @swagger\n * /api/auth/me:\n *   get:\n *     summary: Get current user profile\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: User profile retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 data:\n *                   type: object\n *                   properties:\n *                     user:\n *                       $ref: '#/components/schemas/User'\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.get('/me', authenticate, getMe);\n\n/**\n * @swagger\n * /api/auth/profile:\n *   put:\n *     summary: Update user profile\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               firstName:\n *                 type: string\n *                 minLength: 2\n *                 maxLength: 50\n *               lastName:\n *                 type: string\n *                 minLength: 2\n *                 maxLength: 50\n *               phone:\n *                 type: string\n *                 pattern: '^[+]?[1-9]?[0-9]{7,15}$'\n *               dateOfBirth:\n *                 type: string\n *                 format: date\n *               address:\n *                 type: object\n *                 properties:\n *                   street:\n *                     type: string\n *                   city:\n *                     type: string\n *                   state:\n *                     type: string\n *                   country:\n *                     type: string\n *                   zipCode:\n *                     type: string\n *               education:\n *                 type: object\n *                 properties:\n *                   degree:\n *                     type: string\n *                   institution:\n *                     type: string\n *                   graduationYear:\n *                     type: number\n *               examPreferences:\n *                 type: object\n *                 properties:\n *                   preferredExamTypes:\n *                     type: array\n *                     items:\n *                       type: string\n *                       enum: [GATE, GRE, TOEFL]\n *                   studyGoals:\n *                     type: array\n *                     items:\n *                       type: string\n *               settings:\n *                 type: object\n *                 properties:\n *                   notifications:\n *                     type: object\n *                   privacy:\n *                     type: object\n *                   preferences:\n *                     type: object\n *     responses:\n *       200:\n *         description: Profile updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: Profile updated successfully\n *                 data:\n *                   type: object\n *                   properties:\n *                     user:\n *                       $ref: '#/components/schemas/User'\n *       400:\n *         description: Validation error\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.put('/profile', authenticate, validateUpdateProfile, validateRequest, updateProfile);\n\n/**\n * @swagger\n * /api/auth/account:\n *   delete:\n *     summary: Delete user account\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - password\n *             properties:\n *               password:\n *                 type: string\n *                 description: Current password for confirmation\n *     responses:\n *       200:\n *         description: Account deleted successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                   example: true\n *                 message:\n *                   type: string\n *                   example: Account deleted successfully\n *       400:\n *         description: Incorrect password\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\nrouter.delete('/account', authenticate, deleteAccount);\n\nexport default router;"